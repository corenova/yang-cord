module vsg-service {
  namespace "urn:ietf:params:xml:ns:yang:vsg-service";
  prefix vsg;
  yang-version 1.1;

  import ietf-yang-types { prefix yang; }
  import xos-core        { prefix xos; }
  import xos-service     { prefix xserv; }
  import xos-types       { prefix xtype; }
  import volt-service    { prefix volt; }

  organization
   "Open Networking Lab (CORD) / Corenova Technologies";

  contact
    "Larry Peterson <llp@onlab.us>
     Peter K. Lee <peter@corenova.com>";

  revision 2016-09-09 {
    description "Initial revision.";
  }

  identity virtual-subscriber-gateway { base xos:service; }

  typedef subscriber-flow {
    type leafref {
      path "/vsg:service/vsg:controller/vsg:port/vsg:id";
    }
  }

  grouping gateways-list {
    grouping subscriber-gateway {
      leaf id { type xtype:unique-identifier; }
      
      container services {
        description
          "Contains various services provided by the gateway.";
        container cdn {
          if-feature cdn;
        }
        container firewall {
          if-feature firewall;
          leaf-list rules { type string; }
        }
        container url-filter {
          if-feature url-filter;
          leaf level {
            type enumeration {
              enum "PG";
              // others...
            }
          }
          leaf-list rules { type string; }
        }
        container uverse {
          if-feature uverse;
        }
      }
      list flow {
        description
          "Each flow represents a subscriber flow into the VSG instance.";
        leaf id {
          type yang:uuid;
        }
      }
    }
    list gateway {
      description
        "Each entry represents a VSG instance.";
      key id;
      uses subscriber-gateway;
    }
  }

  grouping controller {
    description
      "This grouping represents a VSG controller which manages multiple VSG
       gateways. The VSG controller provides agregate abstraction of
       the entire NFaaS as a single switch to the network fabric. Each
       port entry of the controller represents each VSG subscriber
       flow as a distinct openflow port.";

    uses gateways-list;
    list port {
      description
        "Each entry represents a VSG subscriber flow connected across VSG
         gateways.";
      key id;
      leaf id {
        description "OpenFlow Port ID";
        type yang:uuid;
        mandatory true;
      }
      leaf link {
        type leafref {
          path '../../gateway/flow/id';
        }
        mandatory true;
      }
    }
  }
  grouping subscriber {
    description
      "This grouping represents a VSG service subscriber along with
       reference to fabric flows used by the subscriber.";

    leaf status {
      type enumeration {
        enum "enabled" {
          description "Enabled";
          value 1;
        }
        enum "suspended" {
          description "Suspended";
        }
        enum "delinquent" {
          description "Delinquent";
        }
        enum "violation" {
          description "Copyright Violation";
        }
      }
      default enabled;
    }
    leaf demo { type boolean; default false; }
    leaf uplink-speed   { type volt:bandwidth; }
    leaf downlink-speed { type volt:bandwidth; }
    
    list tag {
      description
        "Each entry represents a unique openflow port ID that the subscriber
         connects to the VSG service from the fabric.";
      
      key flow;
      leaf flow {
        type union {
          type volt:subscriber-flow;
          type vsg:subscriber-flow {
            description "can be an output flow from the VSG service.";
          }
          type yang:uuid {
            description "supports a generic openflow port ID";
          }
        }
      }
    }
    leaf-list flows {
      description
        "Each entry represents a unique openflow port ID that the subscriber
         uses to connect into the fabric from the VSG service.";
      config false;
      type subscriber-flow;
    }
  }
  
  /*
   * Configuration data
   */
  container service {
    uses xserv:service {
      refine kind { default virtual-subscriber-gateway; }
      augment "controller" { uses vsg:controller; }
      augment "subscriber" { uses vsg:subscriber; }
    }
  }
}
